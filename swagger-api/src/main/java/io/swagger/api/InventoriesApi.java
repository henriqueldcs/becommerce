/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import io.swagger.model.Inventory;
import io.swagger.model.InventoryProduct;
import io.swagger.model.InventoryProductAction;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-02-18T04:49:14.604Z")

@Api(value = "inventories", description = "the inventories API")
public interface InventoriesApi {

    @ApiOperation(value = "Adicionar um novo ao estoque.", nickname = "addInventoryProduct", notes = "Recurso usado para fazer a adição de novos produtos ao estoque.", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "Estoque", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK. Protudo já cadastrado em estoque"),
        @ApiResponse(code = 201, message = "Produto adicionado ao estoque"),
        @ApiResponse(code = 401, message = "Token inválido") })
    @RequestMapping(value = "/inventories",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addInventoryProduct(@ApiParam(value = "Campos informados na adição de um produto ao estoque." ,required=true )  @Valid @RequestBody Inventory inventory, @RequestHeader(name = "api_key")  String apiKey);


    @ApiOperation(value = "Listar produtos em estoque.", nickname = "listInventoryProducts", notes = "Recurso usado para listar produtos em estoque.", response = InventoryProduct.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "Estoque", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = InventoryProduct.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Token inválido"),
        @ApiResponse(code = 404, message = "Produto não encontrado em estoque") })
    @RequestMapping(value = "/inventories",
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<InventoryProduct>> listInventoryProducts(@ApiParam(value = "Número da página a ser retornada", defaultValue = "0") @Valid @RequestParam(value = "page", required = false, defaultValue="0") Integer page,@ApiParam(value = "Tamanho da página a ser retornada", defaultValue = "10") @Valid @RequestParam(value = "size", required = false, defaultValue="10") Integer size,@ApiParam(value = "Código de referência do produto em estoque") @Valid @RequestParam(value = "productReferenceCode", required = false) String productReferenceCode, @RequestHeader(name = "api_key")  String apiKey);


    @ApiOperation(value = "Incrementar ou decrementar a quantidade de um produto em estoque.", nickname = "updateInventoryProduct", notes = "Recurso usado para fazer o incremento ou decremento de produtos do estoque.", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "Estoque", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK. Produto incrementado ou decrementado"),
        @ApiResponse(code = 401, message = "Token inválido"),
        @ApiResponse(code = 404, message = "Produto não encontrado") })
    @RequestMapping(value = "/inventories",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateInventoryProduct(@ApiParam(value = "Campos informados na adição de um produto." ,required=true )  @Valid @RequestBody InventoryProductAction inventoryProductAction, @RequestHeader(name = "api_key")  String apiKey);

}
